TIG cheatsheet
source: manual page

Example on how to colorize the output of git-show(1):
$ git show | tig

Various views of a repository are presented. Each view is based on output from an external command, most often git log, git diff, or git show.

The main view
Is the default view, and it shows a one line summary of each commit in the chosen list of revisions. The summary includes author date, author, and the first line of the log message. Additionally, any repository references, such as tags, will be shown.

The log view
Presents a more rich view of the revision log showing the whole log message and the diffstat.

The reflog view
Presents a view of the reflog allowing to navigate the repo history.

The diff view
Shows either the diff of the current working tree, that is, what has changed since the last commit, or the commit diff complete with log message, diffstat and diff.

The tree view
Lists directory trees associated with the current revision allowing subdirectories to be descended or ascended and file blobs to be viewed.

The blob view
Displays the file content or "blob" of data associated with a file name.

The blame view
Displays the file content annotated or blamed by commits.

The refs view
Displays the branches, remotes and tags in the repository.

The status view
Displays status of files in the working tree and allows changes to be staged/unstaged as well as adding of untracked files.

The stage view
Displays diff changes for staged or unstaged files being tracked or file content of untracked files.

The stash view
Displays the list of stashes in the repository.

The grep view
Displays a list of files and all the lines that matches a search pattern.

The pager view
Is used for displaying both input from stdin and output from Git commands entered in the internal prompt.

The help view
Displays a quick reference of key bindings.

Browsing State and User-defined Commands

%(head)                    The currently viewed head ID. Defaults to HEAD
%(commit)                  The currently selected commit ID.
%(blob)                    The currently selected blob ID.
%(branch)                  The currently selected branch name.
%(remote)                  The currently selected remote name. For remote branches %(branch) will contain the branch name.
%(tag)                     The currently selected tag name.
%(refname)                 The currently selected reference name including the remote name for remote branches.
%(stash)                   The currently selected stash name.
%(directory)               The current directory path in the tree view or "." if undefined.
%(file)                    The currently selected file.
%(lineno)                  The currently selected line number. Defaults to 0.
%(lineno_old)              The currently selected line number, before the diff was applied.  Defaults to 0.
%(ref)                     The reference given to blame or HEAD if undefined.
%(revargs)                 The revision arguments passed on the command line.
%(fileargs)                The file arguments passed on the command line.
%(cmdlineargs)             All other options passed on the command line.
%(diffargs)                Options from diff-options or TIG_DIFF_OPTS used by the diff and stage view.
%(blameargs)               Options from blame-options used by the blame view.
%(logargs)                 Options from log-options used by the log view.
%(mainargs)                Options from main-options used by the main view.
%(prompt)                  Prompt for the argument value. Optionally specify a custom prompt using "%(prompt Enter branch name: )"
%(text)                    The text of the currently selected line.
%(repo:head)               The name of the checked out branch, e.g. master
%(repo:head-id)            The commit ID of the checked out branch.
%(repo:remote)             The remote associated with the checked out branch, e.g. origin/ master.
%(repo:cdup)               The path to change directory to the repository root, e.g. ../
%(repo:prefix)             The path prefix of the current work directory, e.g subdir/.
%(repo:git-dir)            The path to the Git directory, e.g. /src/repo/.git.
%(repo:worktree)           The worktree path, if defined.
%                          Whether Tig is running inside a work tree, either true or false.  (repo:is-inside-work-tree)

Configuration Files

Upon startup, Tig first reads the system wide configuration file ({sysconfdir}/tigrc by
default) and then proceeds to read the user’s configuration file (~/.tigrc or
$XDG_CONFIG_HOME/tig/config by default). The paths to either of these files can be overridden
through the following environment variables:

TIGRC_USER
Path of the user configuration file.

TIGRC_SYSTEM
Path of the system wide configuration file.

Default Keybindings
--------------------------
View Switching

m   Switch to main view.
d   Switch to diff view.
l   Switch to log view.
p   Switch to pager view.
t   Switch to (directory) tree view.
f   Switch to (file) blob view.
g   Switch to grep view.
b   Switch to blame view.
r   Switch to refs view.
y   Switch to stash view.
h   Switch to help view
s   Switch to status view
c   Switch to stage view

View Manipulation

q     	Close view, if multiple views are open it will jump back to the previous view in the
  	view stack. If it is the last open view it will quit. Use Q to quit all views at once.
Enter 	This key is "context sensitive" depending on what view you are currently in. When in
	log view on a commit line or in the main view, split the view and show the commit diff.
  	In the diff view pressing Enter will simply scroll the view one line down.
Tab   	Switch to next view.
R	Reload and refresh the current view.
O 	Maximize the current view to fill the whole display.
Up      This key is "context sensitive" and will move the cursor one line up. However, if you
  	opened a split view it will change the cursor to point to the previous commit in the
	parent view and update the child view to display it. If you prefer this key to move the
  	cursor or scroll within the diff view instead, use bind diff <Up> move-up or bind diff
  	<Up> scroll-line-up, respectively.
Down  	Similar to Up but will move down.
,     	Move to parent. In the tree view, this means switch to the parent directory. In the
  	blame view it will load blame for the parent commit. For merges the parent is queried.

View Specific Actions

u    	Update status of file. In the status view, this allows you to add an untracked file or
	stage changes to a file for next commit (similar to running git-add <filename>). In the
	stage view, when pressing this on a diff chunk line stages only that chunk for next
	commit, when not on a diff chunk line all changes in the displayed diff are staged.
M	Resolve unmerged file by launching git-mergetool(1). Note, to work correctly this might
	require some initial configuration of your preferred merge tool. See the manpage of
	git-mergetool(1).
!	Checkout file with unstaged changes. This will reset the file to contain the content it
	had at last commit.
1   	Stage single diff line.
@   	Move to next chunk in the stage view.
]   	Increase the diff context.
[   	Decrease the diff context.

Cursor Navigation

k             Move cursor one line up.
j             Move cursor one line down.
PgUp, -       Move cursor one page up.
PgDown, Space Move cursor one page down.
Home          Jump to first line.
End           Jump to last line.

Scrolling

Insert     Scroll view one line up.
Delete     Scroll view one line down.
ScrollBack Scroll view one page up.
ScrollFwd  Scroll view one page down.
Left       Scroll view one column left.
Right      Scroll view one column right.
|          Scroll view to the first column.

Searching

/   Search the view. Opens a prompt for entering search regexp to use.
?   Search backwards in the view. Also prompts for regexp.
n   Find next match for the current search regexp.
N   Find previous match for the current search regexp.

Misc
Q     Quit.
<C-L> Redraw screen.
z     Stop all background loading. This can be useful if you use Tig in a repository with a
  long history without limiting the revision log.
v     Show version.
o     Open option menu
#     Toggle line numbers on/off.
D     Toggle date display on/off/relative/relative-compact/custom
A     Toggle author display on/off/abbreviated/email/email user name.
G     Toggle revision graph visualization on/off.
~     Toggle (line) graphics mode
F     Toggle reference display on/off (tag and branch names).
W     Toggle ignoring whitespace on/off for diffs
X     Toggle commit ID display on/off
%     Toggle file filtering in order to see the full diff instead of only the diff concerning
  the currently selected file.
$     Toggle highlighting of commit title overflow.
H     Go to the HEAD commit.
:     Open prompt. This allows you to specify what command to run and also to jump to a
  specific line, e.g. :23
e     Open file in editor.

Prompt

:<number>     		Jump to the specific line number, e.g. :80.
:<sha>        		Jump to a specific commit, e.g. :2f12bcc.
:<x>          		Execute the corresponding key binding, e.g. :q.
:!<command>   		Execute a system command in a pager, e.g. :!git log -p.
:<action>     		Execute a Tig command, e.g. :edit.
:goto <rev>   		Jump to a specific revision, e.g. :goto %(commit)^2 to goto the current commit’s 2nd parent or :goto some/branch to goto the commit denoting the branch some/branch.
:save-display <file>	Save current display to <file>.
:save-options <file>	Save current options to <file>.
:save-view <file>       Save view info to <file> (for testing purposes).
:script <file>      	Execute commands from <file>.
:exec <flags> 		Execute command using <args> with external user-defined command option flags <args…​> defined in <flags>.
:echo <args…​>     Display text in the status bar.


vim cheatsheet
------------------------------
source: https://vim.rtorr.com/
	phoenixNAP global services

Global
----------------
:h[elp] keyword - open help for keyword
:sav[eas] file - save file as
:clo[se] - close current pane
:ter[minal] - open a terminal window
K - open man page for word under the cursor

Exiting
-------------------------
:w - write (save) the file, but don't exit
:w !sudo tee % - write out the current file using sudo
:wq or :x or ZZ - write (save) and quit
:q - quit (fails if there are unsaved changes)
:q! or ZQ - quit and throw away unsaved changes
:wqa - write (save) and quit on all tabs

Cursor movement
--------------------------
Can use with multiplier
h - move cursor left
j - move cursor down
k - move cursor up
l - move cursor right
gj - move cursor down (multi-line text)
gk - move cursor up (multi-line text)
H - HIGH move to top of screen
M - MIDDLE move to middle of screen
L - LOW move to bottom of screen
w - jump forwards to the start of a word
W - jump forwards to the start of a token (words & punctuation)
e - jump forwards to the end of a word
E - jump forwards to the end of a token (words & punctuation)
b - jump backwards to the start of a word
B - jump backwards to the start of a token (words & punctuation)
ge - jump backwards to the end of a word
gE - jump backwards to the end of a token (words & punctuation)
gg - go to the first line of the document
G - go to the last line of the document
5gg or 5G - go to line 5
} - jump to next paragraph (or function/block, when editing code)
{ - jump to previous paragraph (or function/block, when editing code)
^ e - move screen down one line (without moving cursor)
^ y - move screen up one line (without moving cursor)
^ b - BACK move screen up one page (cursor to last line)
^ f - FWD move screen down one page (cursor to first line)
^ d - DOWN move cursor and screen down 1/2 page
^ u - UP move cursor and screen up 1/2 page

% - move cursor to matching character (default supported pairs:
    '()', '{}', '[]' - use |:h matchpairs| in vim for more info)
0 - jump to the start of the line
^ - jump to the first non-blank character of the line
$ - jump to the end of the line
g_ - jump to the last non-blank character of the line
fx - jump to next occurrence of character x
tx - jump to before next occurrence of character x
Fx - jump to the previous occurrence of character x
Tx - jump to after previous occurrence of character x
; - repeat previous f, t, F or T movement
, - repeat previous f, t, F or T movement, backwards
zz - center linw on screen
zt - position line on top of the screen
zb - position line on bottom of the screen

Insert mode - inserting/appending text
----------------------------------------------
i - insert before the cursor
I - insert at the beginning of the line
a - insert (append) after the cursor
A - insert (append) at the end of the line
o - append (open) a new line below the current line
O - append (open) a new line above the current line
ea - insert (append) at the end of the word
Ctrl + h - delete character before the cursor during insert mode
Ctrl + w - delete Word before the cursor during insert mode
Ctrl + j - = return / add a line break at the cursor position during insert mode
Ctrl + t - tab / indent (move right) line one shiftwidth during insert mode
Ctrl + d - de-indent (move left) line one shiftwidth during insert mode
Ctrl + n - insert (auto-complete) next match before the cursor during insert mode
Ctrl + p - insert (auto-complete) previous match before the cursor during insert mode
Ctrl + rx - insert the contents of register x
Ctrl + ox - Temporarily enter normal mode to issue one normal-mode command x.
Esc or ^c - exit insert mode

Editing
---------------------
r - replace a single character.
R - replace more than one character, until ESC is pressed.
J - join line below to the current one with one space in between
gJ - join line below to the current one without space in between
gwip - reflow paragraph
g~ - switch case up to motion
gu - change to lowercase up to motion
gU- change to uppercase up to motion
cc - change (replace) entire line
c$ or C - change (replace) to the end of the line
ciw - change (replace) entire word
cw or ce - change (replace) to the end of the word
x - delete character and stay in normal mode
s - delete character and enter input mode (same as cl or xi)
S - delete line and enter input mode (same as cc)
xp - transpose two letters (delete and paste)

Undo/redo
--------------------
u - undo (same as :u or :undo) 
    can use multiplier (num u)
:undolist - list of undo branches
U - Undo all changes in line (restore line)
^r - redo
    can use multiplier (num ^r)
. - repeat last command

    Marking text (visual mode)
----------------------------------
v - start visual mode, mark lines, then do a command (like y-yank)
V - start linewise visual mode
o - move to other end of marked area
Ctrl + v - start visual block mode
O - move to other corner of block
aw - mark a word
ab - a block with ()
aB - a block with {}
at - a block with <> tags
ib - inner block with ()
iB - inner block with {}
it - inner block with <> tags
Esc or Ctrl + c - exit visual mode

*Tip* Instead of b or B one can also use ( or { respectively.

    Visual commands
--------------------------
> - shift text right
< - shift text left
y - yank (copy) marked text
d - delete marked text
~ - switch case
u - change marked text to lowercase
U - change marked text to uppercase

    Registers
-----------------------
:reg[isters] - show registers content
"xy - yank into register x
"xp - paste contents of register x
"+y - yank into the system clipboard register
"+p - paste from the system clipboard register

*Tip* Registers are being stored in ~/.viminfo, and will be loaded again
on next restart of vim.

*Tip* Special registers:
 0 - last yank
 " - unnamed register, last delete or yank
 % - current file name
 # - alternate file name
 * - clipboard contents (X11 primary)
 + - clipboard contents (X11 clipboard)
 / - last search pattern
 : - last command-line
 . - last inserted text
 - - last small (less than a line) delete
 = - expression register
 _ - black hole register


    Marks and positions
----------------------------
:marks - list of marks
ma - set current position for mark A
`a - jump to position of mark A
y`a - yank text to position of mark A
`0 - go to the position where Vim was previously exited
`" - go to the position when last editing this file
`. - go to the position of the last change in this file
`` - go to the position before the last jump
:ju[mps] - list of jumps
Ctrl + i - go to newer position in jump list
Ctrl + o - go to older position in jump list
:changes - list of changes
g, - go to newer position in change list
g; - go to older position in change list
Ctrl + ] - jump to the tag under cursor

*Tip* To jump to a mark you can either use a backtick (`) or an
apostrophe ('). Using an apostrophe jumps to the beginning (first non-
blank) of the line holding the mark.

    Macros
---------------------------
qa - record macro a
q - stop recording macro
@a - run macro a
@@ - rerun last run macro

    Cut and paste
-------------------------------------
yy - yank (copy) a line
    2yy - yank (copy) 2 lines
    yw - yank (copy) the characters of the word from the cursor position
    to the start of the next word
    yiw - yank (copy) word under the cursor
    yaw - yank (copy) word under the cursor and the space after or
    before it
    y$ or Y - yank (copy) to end of line
p - put (paste) the clipboard after cursor
    P - put (paste) before cursor
    gp - put (paste) the clipboard after cursor and leave cursor after
    the new text
    gP - put (paste) before cursor and leave cursor after the new text
dd/D - delete (cut) a line
    2dd/d2d - delete (cut) 2 lines
    dw - delete (cut) the characters of the word from the cursor
    position to the start of the next word
    diw - delete (cut) word under the cursor
    daw - delete (cut) word under the cursor and the space after or
    before it
    :3,5d - delete lines starting from 3 to 5
    :%d - delete all file

*Tip* You can also use the following characters to specify the range:
e.g.

:.,$d - From the current line to the end of the file
:.,1d - From the current line to the beginning of the file
:10,$d - From the 10th line to the beginning of the file

:g/{pattern}/d - delete all lines containing pattern
:g!/{pattern}/d - delete all lines not containing pattern
d$ or D - delete (cut) to the end of the line
x - delete (cut) character


    Indent text

>> - indent (move right) line one shiftwidth
<< - de-indent (move left) line one shiftwidth
>% - indent a block with () or {} (cursor on brace)
<% - de-indent a block with () or {} (cursor on brace)
>ib - indent inner block with ()
>at - indent a block with <> tags
3== - re-indent 3 lines
=% - re-indent a block with () or {} (cursor on brace)
=iB - re-indent inner block with {}
gg=G - re-indent entire buffer
]p - paste and adjust indent to current line



    Search and replace

/pattern - search for pattern
?pattern - search backward for pattern
\vpattern - 'very magic' pattern: non-alphanumeric characters are
    interpreted as special regex symbols (no escaping needed)
n - repeat search in same direction
N - repeat search in opposite direction
:%s/old/new/g - replace all old with new throughout file
:%s/old/new/gc - replace all old with new throughout file with
    confirmations
:noh[lsearch] - remove highlighting of search matches

    Search in multiple files

:vim[grep] /pattern/ {`{file}`} - search for pattern in multiple files

e.g. :vim[grep] /foo/ **/*

:cn[ext] - jump to the next match
:cp[revious] - jump to the previous match
:cope[n] - open a window containing the list of matches
:ccl[ose] - close the quickfix window


    Tabs

:tabnew or :tabnew {page.words.file} - open a file in a new tab
Ctrl + wT - move the current split window into its own tab
gt or :tabn[ext] - move to the next tab
gT or :tabp[revious] - move to the previous tab
#gt - move to tab number #
:tabm[ove] # - move current tab to the #th position (indexed from 0)
:tabc[lose] - close the current tab and all its windows
:tabo[nly] - close all tabs except for the current one
:tabdo command - run the |command| on all tabs (e.g. |:tabdo q| -
    closes all opened tabs)


    Working with multiple files

:e[dit] file - edit a file in a new buffer
:bn[ext] - go to the next buffer
:bp[revious] - go to the previous buffer
:bd[elete] - delete a buffer (close a file)
:b[uffer]# - go to a buffer by index #
:b[uffer] file - go to a buffer by file
:ls or :buffers - list all open buffers
:sp[lit] file - open a file in a new buffer and split window
:vs[plit] file - open a file in a new buffer and vertically split
    window
:vert[ical] ba[ll] - edit all buffers as vertical windows
:tab ba[ll] - edit all buffers as tabs
Ctrl + ws - split window
Ctrl + wv - split window vertically
Ctrl + ww - switch windows
Ctrl + wq - quit a window
Ctrl + wx - exchange current window with next one
Ctrl + w= - make all windows equal height & width
Ctrl + wh - move cursor to the left window (vertical split)
Ctrl + wl - move cursor to the right window (vertical split)
Ctrl + wj - move cursor to the window below (horizontal split)
Ctrl + wk - move cursor to the window above (horizontal split)
Ctrl + wH - make current window full height at far left (leftmost
    vertical window)
Ctrl + wL - make current window full height at far right (rightmost
    vertical window)
Ctrl + wJ - make current window full width at the very bottom
    (bottommost horizontal window)
Ctrl + wK - make current window full width at the very top (topmost
    horizontal window)


    Diff

zf - manually define a fold up to motion
zd - delete fold under the cursor
za - toggle fold under the cursor
zo - open fold under the cursor
zc - close fold under the cursor
zr - reduce (open) all folds by one level
zm - fold more (close) all folds by one level
zi - toggle folding functionality
]c - jump to start of next change
[c - jump to start of previous change
do or :diffg[et] - obtain (get) difference (from other buffer)
dp or :diffpu[t] - put difference (to other buffer)
:diffthis - make current window part of diff
:dif[fupdate] - update differences
:diffo[ff] - switch off diff mode for current window

*Tip* The commands for folding (e.g. za) operate on one level. To
operate on all levels, use uppercase letters (e.g. zA).
*Tip* To view the differences of files, one can directly start Vim in
diff mode by running vimdiff in a terminal. One can even set this as git
difftool.

/ll
 * :set nu - activate line numbers
 * :set nonu - deactivate line numbers
 * :colo[rscheme] [tab] - show list of schemes
 * :colo [^d] - show list of schemes
 * :colo - show current scheme
 * :colo [name] - use colorscheme

Spell check (from v.7) 
 * :set spell spelllang=en_us
 * :setlocal spell spelllang=en_us to check local buffer only
 * :set nospell to turn spelling off
 * ]s next misspelled word
 * [s previous misspelled word
 * z= list of suggestions
 * zg good word
 * zw wrong word
 * .vimrc - add this
	set spell spelllang=en_us


 * "+p paste from clipboard


source: Vimtutor summaries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#L1
h (left)	j (down)       k (up)	    l (right)
vim FILENAME <ENTER>
<ESC>   :q!	 <ENTER>  to trash all changes.
<ESC>   :wq	 <ENTER>  to save the changes.
x  	delete the character at the cursor type
i   	type inserted text   <ESC>	insert before the cursor
a   	type appended text   <ESC>	insert after the cursor
A   	type appended text   <ESC>	append after the line

#L2
dw	delete from the cursor up to the next word
dei	delete from the cursor up to the end of the word
d$ 	delete from the cursor to the end of a line
dd  	delete a whole line
2w	repeat a motion prepend it with a number
w 	word
e 	end of word
$ 	end of the line
0	start of the line	
u	undo previous actions
U	undo all the changes on a line
Ctrl-R	undo the undos

#L3
p	put (paste) text after cursor / full line(s) after current line
r	replace character
ce	change until end of word
c$	change until end of line

#L4
CTRL-G  	displays your location in the file and the file status.
G  		moves to the end of the file.
number  G  	moves to that line number.
gg  		moves to the first line.

Search
-----------------------
/	followed by a phrase searches FORWARD for the phrase.
?	followed by a phrase searches BACKWARD for the phrase.
*	find next instance of a word under cursor
#	find previous instance of a word under cursor
n  	to find the next occurrence in the same direction
N  	to search in the opposite direction.
CTRL-O 	takes you back to older positions, 
CTRL-I 	to newer positions.

%	while the cursor is on a (,),[,],{, or } goes to its match.

:s/old/new		To substitute new for the first old in a line 
:s/old/new/g     	To substitute new for all 'old's on a line 
:#,#s/old/new/g     	To substitute phrases between two line #'s 
:%s/old/new/g     	To substitute all occurrences in the file 
:%s/old/new/gc     	To ask for confirmation each time add 'c'		   

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       Lesson 5 SUMMARY


  1.  :!command  executes an external command.

      Some useful examples are:
	 (Windows)	  (Unix)
	  :!dir		   :!ls		   -  shows a directory listing.
	  :!del FILENAME   :!rm FILENAME   -  removes file FILENAME.

  2.  :w FILENAME  writes the current Vim file to disk with name FILENAME.

  3.  v  motion  :w FILENAME  saves the Visually selected lines in file
      FILENAME.

  4.  :r FILENAME  retrieves disk file FILENAME and puts it below the
      cursor position.

  5.  :r !dir  reads the output of the dir command and puts it below the
      cursor position.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       Lesson 6 SUMMARY

  1. Type  o  to open a line BELOW the cursor and start Insert mode.
     Type  O  to open a line ABOVE the cursor.

  2. Type  a  to insert text AFTER the cursor.
     Type  A  to insert text after the end of the line.

  3. The  e  command moves to the end of a word.

  4. The  y  operator yanks (copies) text,  p  puts (pastes) it.

  5. Typing a capital  R  enters Replace mode until  <ESC>  is pressed.

  6. Typing ":set xxx" sets the option "xxx".  Some options are:
  	'ic' 'ignorecase'	ignore upper/lower case when searching
	'is' 'incsearch'	show partial matches for a search phrase
	'hls' 'hlsearch'	highlight all matching phrases
     You can either use the long or the short option name.

  7. Prepend "no" to switch an option off:   :set noic

/ll  :noh[lsearch] turns off highlighted text for search
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			       Lesson 7 SUMMARY


  1. Type  :help  or press <F1> or <HELP>  to open a help window.

  2. Type  :help cmd  to find help on  cmd .

  3. Type  CTRL-W CTRL-W  to jump to another window.

  4. Type  :q  to close the help window.

  5. Create a vimrc startup script to keep your preferred settings.

  6. When typing a  :  command, press CTRL-D to see possible completions.
     Press <TAB> to use one completion.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Alternatives explored
-----------------------
nano
emacs
neovim
